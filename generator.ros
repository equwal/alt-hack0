#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(:alexandria :str :uiop :let-over-lambda)
                           :silent t)
  (asdf:load-system :utils) ;My utilities, has the COLLECT macro.
  )

(defpackage :ros.script.generator.3783095582
  (:use :cl)
  (:import-from
   :alexandria
   :flatten
   :compose)
  (:import-from :str :concat)
  (:import-from :utils :collect :group :mapatoms)
  (:import-from
   :uiop
   :copy-file
   :resolve-symlinks
   :directory-files
   :subdirectories
   :run-program))
(in-package :ros.script.generator.3783095582)
;;; Uses a magic symlinks to deal with directories. Make sure they exist in your
;;; toplevel:
;;; - tt-hinting (in hack/post_processing)
;;; - glyphs (in alt-hack)
;;; - source (in hack)
;;; - hack
(defvar *weights* '("Bold" "BoldItalic" "Italic" "Regular"))

(defun uncomment (spec)
  (remove-if #'(lambda (item)
                 (and (stringp item)
                      (= 1 (length item))))
             spec))

(defparameter *groups*
  (mapcar #'uncomment
   '((curve "u0028-curved" "("
      "u0029-curved" ")")
     (round "u0028-rounder" "("
      "u0029-rounder" ")")
     (backslash "u0030-backslash" "0")
     (diamond "u0030-diamond" "0")
     (dot "u0030-dotted" "0")
     (forwardslash "u0030-forwardslash" "0")
     (noslab1 "u0031-noslab" "1")
     (flattop3 "u0033-flattop" "3")
     (wider "u003C-wider" "<"
      "u003E-wider" ">")
     (knife "u0066-knife" "f")
     (slabi "u0069-slab" "i"
      "u00EC-slab" "ì"
      "u00ED-slab" "í"
      "u00EE-slab" "î"
      "u00EF-slab" "ï"
      "u0129-slab" "ĩ"
      "u012B-slab" "ī"
      "u012D-slab" "ĭ"
      "u012F-slab" "į"
      "u0131-slab" "ı"
      "u0456-slab" "і"
      "u0457-slab" "ї")))
  "Things you actually want to permute together.")

(defun find-keyword (keyword group)
  (when (not (null group))
    (let ((c (car group)))
      (if (eql keyword (car c))
          c
          (find-keyword keyword (cdr group))))))

(defun folders (keyword)
  (cdr (find-keyword keyword *groups*)))

(defun pprint-letters (letter-alist)
  (dolist (p letter-alist)
    (format t "~S ~S~%"
            (car p) (string (cdr p)))))

(defun show-characters ()
  (let ((dirs (subdirectories "glyphs")))
    (pprint-letters
     (collect (d dirs)
       (let ((mat (car (last (pathname-directory d)))))
         (cons mat
               (code-char (read (make-string-input-stream
                                 (concat "#x"
                                         (subseq mat 1 (search "-" mat))))))))))))

(defun help ()
  (format t "~@{~A~%~}"
          "generator.ros SPEC+"
          "SPEC should be a list of:")
  (format t "~{~T~A~%~}"
          (remove-if #'stringp (flatten *groups*))))

(defun remove-hints ()
  (let ((files (directory-files #P"tt-hinting")))
    (dolist (f files)
      (with-open-file (si f :direction :input)
        (with-open-file (so f :direction :output
                              :if-exists :supersede)
          (let ((line (read-line si nil nil)))
            (when (and line (char/= #\#(elt line 0)))
              (write-line (format nil "# ~S~%" line) so))))))))

(defun put-glyphs! (ufolders)
  (dolist (arg ufolders)
    (dolist (weight *weights*)
      (dolist (f (uiop:directory-files
                  (concat "glyphs/" arg "/"
                          (string-downcase weight) "/")))
        (copy-file f
                   (concat "hack/" "source/Hack-" weight
                           ".ufo/glyphs/"
                           (concat (pathname-name f) "."
                                   (pathname-type f))))))))
(defun make-it (&optional subcommand)
  ;; Cannot use uiop:launch-program since it is asynchronous.
  (run-program (if subcommand
                      (list "make" subcommand)
                      "make")
                  :output *standard-output*
                  :directory (resolve-symlinks #P"hack")
                  :error-output *standard-output*))
(defun build (&rest make-commands)
  (dolist (m make-commands)
    (make-it m)))

(defun verify (spec)
  (not (set-difference spec (mapcar #'car *groups*))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (let ((f (first argv)))
    (if (or (null argv)
            (search "-?" f)
            (search "--help" f)
            (search "-h" f))
        (help)
        (let ((argv (mapcar (compose #'intern #'string-upcase) argv)))
          (when (verify argv)
            (remove-hints)
            (mapc #'put-glyphs!
                  (mapcar #'folders argv))
            ;; Can't get woff2 on my system.
            ;; (make-it "woff2")
            ;; (make-it)
            (build "ttf" "woff"))))))

;;; vim: set ft=lisp lisp:
