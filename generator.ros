#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(:alexandria :str :uiop :let-over-lambda)
                           :silent t)
  (asdf:load-system :utils) ;My utilities, has the COLLECT macro.
  )

(defpackage :ros.script.generator.3783095582
  (:use :cl)
  (:import-from
   :alexandria
   :flatten)
  (:import-from :str :concat)
  (:import-from :utils :collect :group :mapatoms)
  (:import-from
   :uiop
   :directory-files
   :subdirectories
   :launch-program))
(in-package :ros.script.generator.3783095582)
;;; Uses a magic symlinks to deal with directories. Make sure they exist in your
;;; toplevel:
;;; - tt-hinting (in hack/post_processing)
;;; - glyphs (in alt-hack)
;;; - source (in hack)
;;; - hack
(defvar *weights* '("Bold" "BoldItalic" "Italic" "Regular"))

(defparameter *groups*
  '((one-of (curve "u0028-curved" "("
                   "u0029-curved" ")")
     (round "u0028-rounder" "("
            "u0029-rounder" ")"))
    (one-of (backslash "u0030-backslash" "0")
            (diamond "u0030-diamond" "0")
            (dot "u0030-dotted" "0")
            (forwardslash "u0030-forwardslash" "0"))
    (noslab1 "u0031-noslab" "1")
    (flattop3 "u0033-flattop" "3")
    (wider "u003C-wider" "<"
           "u003E-wider" ">")
    (knife "u0066-knife" "f")
    (slabi "u0069-slab" "i"
           "u00EC-slab" "ì"
           "u00ED-slab" "í"
           "u00EE-slab" "î"
           "u00EF-slab" "ï"
           "u0129-slab" "ĩ"
           "u012B-slab" "ī"
           "u012D-slab" "ĭ"
           "u012F-slab" "į"
           "u0131-slab" "ı"
           "u0456-slab" "і"
           "u0457-slab" "ї"))
  "Things you actually want to permute together.")

(defun verify (spec)
  (and (symbolp spec)
       (not (eql spec 'one-of))
       (find spec (flatten *groups*))))
(defun mapchoices (spec)
  "Spec should be one of the names in *groups*."
  (if (not (verify spec))
      (error "The spec ~A is INVALID!" spec)
      ))
(defun pprint-letters (letter-alist)
  (dolist (p letter-alist)
    (format t "~S ~S~%"
            (car p) (string (cdr p)))))

(defun show-characters ()
  (let ((dirs (subdirectories "glyphs")))
    (pprint-letters
     (collect (d dirs)
       (let ((mat (car (last (pathname-directory d)))))
         (cons mat
               (code-char (read (make-string-input-stream
                                 (concat "#x"
                                         (subseq mat 1 (search "-" mat))))))))))))

(defun help ()
  (format t "~@{~A~%~}"
          "generator.ros SPEC+"
          "SPEC should be one of ")
  (format t "~{~A~%~}"
          (remove 'one-of
                  (remove-if #'stringp (flatten *groups*)))))
(defun remove-hints ()
  (let ((files (uiop:directory-files #P"tt-hinting")))
    (dolist (f files)
      (with-open-file (s f :direction :io)
        (let ((line (read-line s nil nil)))
          (when (and line (char/= #\#(elt line 0)))
            (write-line (format nil "# ~S~%" line) s)))))))

(defun put-glyphs (ufolders)
  (dolist (arg ufolders)
    (dolist (weight *weights*)
      (launch-program (concat "cp " "glyphs/" arg "/"
                              (string-downcase weight)
                              "/*" " " "source/Hack-" weight
                              ".ufo/glyphs/")))))
(defun build (permutation)
  (put-glyphs permutation)
  (launch-program "make ttf && make woff"
                  :directory #P"hack"))

(defun main (&rest argv)
  (declare (ignorable argv))
  (let ((f (first argv)))
    (if (or (null argv)
            (find #\? f)
            (search "help" f)
            (search "-h" f)
            (search "-?" f))
        (help)
        (progn (remove-hints)
               (build argv)))))





;;; vim: set ft=lisp lisp:
